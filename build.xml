<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="ise3_contentBuild" default="all">
    <description>
        Builds an ISE3-based website from a TEI dataset.
    </description>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    <taskdef name="schematron"
        classpath="lib/ant-schematron-2010-04-14.jar"
        classname="com.schematron.ant.SchematronTask"/>

    <import file="anttask/overridable.xml"/>
    
    <property name="line.separator" value="&#x0a;"/>
    
    <property name="source.dir" value="${basedir}/svn"/>
    <property name="source.data.dir" value="${source.dir}/data"/>
    <property name="utilities.dir" value="${basedir}/lib"/>
    <property name="site.dir" value="${basedir}/site"/>
    <property name="siteXml.dir" value="${site.dir}/xml"/>
    <property name="originalXml.dir" value="${siteXml.dir}/original"/>
    <property name="standardXml.dir" value="${siteXml.dir}/standard"/>
    <property name="standardXml.temp.dir" value="${siteXml.dir}/standard_temp"/>
    <property name="apparatus.temp.dir" value="${standardXml.temp.dir}/apparatus_temp"/>
    <property name="standaloneXml.dir" value="${siteXml.dir}/standalone"/>
    <property name="xsl.dir" value="${basedir}/xsl"/>
    <property name="build.modules.dir" value="${basedir}/build_modules"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="saxon" value="${lib.dir}/saxon9he.jar"/>
    
    <property name="source.schema.dir" value="${source.dir}/sch"/>
    <property name="site.schema.dir" value="${site.dir}/sch"/>
    
    <fileset id="sourceXml" dir="${source.data.dir}">
        <include name="**/**.xml"/>
    </fileset>
    
    <fileset id="originalXml" dir="${originalXml.dir}">
        <include name="**/**.xml"/>
    </fileset>
    
    <!--These are the files we want to move over-->
    <fileset id="tempApparatusFiles" dir="${apparatus.temp.dir}">
        <include name="**_final.xml"/>
    </fileset>
    
    <fileset id="standardXml" dir="${standardXml.dir}">
        <include name="**.xml"/>
    </fileset>
    

   
    
    <fileset id="standaloneXml" dir="${standaloneXml.dir}">
        <include name="**/**.xml"/>
    </fileset>
    
    <fileset id="siteXhtml" dir="${site.dir}">
        <include name="**.html"/>
    </fileset>
    
    <!-- DIR STRUCTURES OF THE SITE
        
        site [site.dir]/
            xml [siteXml.dir]/
                original [originalXml.dir]/
                standalone [standaloneXml.dir]/
            HTML FILES-->
    
    <fileset id="schemaFiles" dir="${source.schema.dir}">
        <include name="**"/>
    </fileset>
    
    <!--We don't need schemas right away, because all of our data should be validated before hand-->
    
    
    <target name="init">

        <echo message="Cleaning up directories from old build..."/>
        <delete dir="${source.dir}"/>
        <delete dir="${site.dir}"/>
        <!--We now make the site dir, but the SVN dir is made for us-->
        <mkdir dir="${site.dir}"/>
        <echo message="Now exporting the SVN data into a data/dir"/>
        <exec executable="svn">
            <arg line="export https://revision.hcmc.uvic.ca/svn/ise3/ ${source.dir} --ignore-externals"/>
        </exec>
    </target>
    
    <target name="copyAuxFiles">
        <echo message="Copying over auxillary files (schema, etc)..."/>
        <copy todir="${site.schema.dir}">
           <fileset refid="schemaFiles"/>
        </copy>
    </target>
    
    <target name="createOriginalXml">
        <echo message="Creating (i.e. just flattening, for now) the original XML from the source XML..."/>
        <mkdir dir="${originalXml.dir}"/>
        <copy todir="${originalXml.dir}" flatten="true">
            <fileset refid="sourceXml"/>
        </copy>
    </target>
    
    <target name="preprocessStandardXml">
        <echo message="Setting up for standarding XML generation..."/>
        <mkdir dir="${standardXml.temp.dir}"/>
        <echo message="Now creating files with attached apparatus..."/>
        <antcall target="createAnchoredXml"/>
        <echo message="First move the original to the standard temp dir..."/>
        <copy todir="${standardXml.temp.dir}">
            <fileset refid="originalXml"/>
        </copy>
        <echo message="Now move the annotation, collations, and fixed texts over to the temporary directory..."/>
        <copy todir="${standardXml.temp.dir}" overwrite="true">
            <fileset refid="tempApparatusFiles"/>
            <regexpmapper from="^(.*)_final.xml" to="\1.xml"/>
        </copy>
      <!--  <delete dir="${apparatus.temp.dir}"/>-->
    </target>
    
   
    <target name="createAnchoredXml">
        <echo message="First, need to add anchors to the texts..."/>
        <echo message="Creating list of documents to which we need to add anchors..."/>

        <property name="app.list" value="${apparatus.temp.dir}/app_list.txt"/>
        <java classname="net.sf.saxon.Transform" classpath="${saxon}" fork="true">
            <jvmarg value="-Xmx1024m"/>
            <arg value="-s:${xsl.dir}/create_app_list_master.xsl"/>
            <arg value="-xsl:${xsl.dir}/create_app_list_master.xsl"/>
            <arg value="basedir=${basedir}"/>
            <arg value="outDoc=${app.list}"/>
        </java>
        <loadfile property="appsToBuild" srcfile="${app.list}"/>
        <echo message="Now attaching all apparatus..."/>
        <foreach list="${appsToBuild}" delimiter="${line.separator}" param="doc" target="attachApparatus"/>
    </target>
    
    <target name="attachApparatus">
        
        <propertyregex property="doc.name" input="${doc}" regexp="(.+)\|(.+)" replace="\1"/>
        <propertyregex property="app.docs" input="${doc}" regexp="(.+)\|(.+)" replace="\2"/>
        <echo message="Attaching apparatus to ${doc.name}"/>
        <!--First, tokenize-->
        <property name="source.file" value="${originalXml.dir}/${doc.name}.xml"/>
        <property name="tokenized.file" value="${apparatus.temp.dir}/${doc.name}_tokenized.xml"/>
        <property name="final.file" value="${apparatus.temp.dir}/${doc.name}_final.xml"/>
        
        
        <echo message="First, tokenize text"/>
        <xslt in="${source.file}" out="${tokenized.file}" style="${xsl.dir}/tokenizeText.xsl">
            <classpath path="${saxon}"/>
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
        </xslt>
        
        
        <echo message="Now, attach apparatus..."/>
        <foreach list="${app.docs}" delimiter="," param="app.name" target="matchLemmas">
            <param name="tokenized.file" value="${tokenized.file}"/>
        </foreach>
        
        
        <echo message="Now, untokenize the text and input anchors where necessary..."/>
        <java classname="net.sf.saxon.Transform" classpath="${saxon}" fork="true">
            <jvmarg value="-Xmx1024m"/>
            <arg value="-s:${tokenized.file}"/>
            <arg value="-xsl:${xsl.dir}/cleanText.xsl"/>
            <arg value="-o:${final.file}"/>
            <arg value="basedir=${basedir}"/>
            <arg value="appDir=${apparatus.temp.dir}"/>
            <arg value="appList=${app.docs}"/>
        </java>
    </target>
    
    <target name="matchLemmas">
        <property name="app.doc" value="${originalXml.dir}/${app.name}.xml"/>
        <java classname="net.sf.saxon.Transform" classpath="${saxon}" fork="true">
            <jvmarg value="-Xmx1024m"/>
            <arg value="-s:${app.doc}"/>
            <arg value="-o:${apparatus.temp.dir}/${app.name}_final.xml"/>
            <arg value="-xsl:xsl/matchLemmas.xsl"/>
            <arg value="basedir=${basedir}"/>
            <arg value="tokenizedXml=${tokenized.file}"/>
        </java>
    </target>
    
    <target name="createStandardXml">
        <echo message="Creating standard XML...."/>
        
        <mkdir dir="${standardXml.dir}"/>
    </target>
    
    <target name="createStandaloneXml">
        <echo message="Creating Standalone XML from standard files..."/>
    </target>
    
   <target name="createXhtml">
       
       
   </target>

<!--
    <target name="package">
        <overridableProperties using="exist-app.properties"/>
        <zip destfile="build/${abbrev}-${version}.xar">
            <fileset dir="build/expath-pkg"/>
            <zipfileset dir="build/data" prefix="content"/>
            <zipfileset dir="web" prefix="content"/>
        </zip>
    </target>-->




    <target name="all" depends="init, copyAuxFiles, createOriginalXml, preprocessStandardXml, createStandardXml"/>
    
    
</project>
